package mx.unam.ciencias.edd.proyecto2;

import java.io.IOException;
import java.util.NoSuchElementException;

/**
 * Proyecto 2: Garficador de estructuras de datos.
 */
public class Proyecto2 {

    /* Imprime el uso del programa y termina. */
    private static void uso() {
        System.err.println("Uso: \n" +
	"java -jar target/proyecto1.jar [-r][-o <identificador>] " +
	"[archivo]... \n o cat [archivo]... | java -jar target/proyecto1.jar " +
	"[-r][-o <identificador>]");
        System.exit(1);
    }

    public static void main(String[] args) {

	/* Procesador de argumentos(args). */
	ProcesadorDeArgumentos procesador = new ProcesadorDeArgumentos();
	/* Objeto para cargar, guardar y ordenar lexicográficamente 
           líneas de texto. */
        Lineas lineas = new Lineas();

	
	try {
	    /* Procesa los argumentos de entrada. */
	    procesador.procesa(args);

	    /* Carga los archivos pasados por argumentos a líneas. */
	    if (procesador.getNumeroDeArchivos() > 0) 
	        for (String archivo : procesador.getArchivos()) 
		    lineas.carga(archivo);
	    /* No carga nigun archivo, se cargará la entrada estándar a 
               líneas. */
            else 
		lineas.carga(null);
	    
	}catch (NoSuchElementException e) {
	    uso();
        }catch (IOException ioe) {
            System.exit(1);
	}
    

	/* Ordena lexicográficamente las lineas. */

	/* Clase para comparar cadenas sensible a la configuracion. */
	Collator comparador = Collator.getInstance();
	/* Establece el nivel de comparación. */
	comparador.setStrength(Collator.PRIMARY);

	/* Lista donde se guardarán las lineas ordenadas.*/
	Lista<String> lista = new Lista<String>();

	/* Ordena de forma inversa si así lo indico el usuario con la 
           bandera -r. */
	if(procesador.getBanderaR()) 
	    lista = lineas.getLineas().mergeSort((l1, l2) -> {
		    /* Elimina todos los espacios en blanco y caractéres raros.*/
		    l1= l1.replaceAll("[^\\p{L}\\p{Z}]", "");
		    l2= l2.replaceAll("[^\\p{L}\\p{Z}]", "");
		    if(comparador.compare(l1, l2) < 0)
			return 1;
		    else if (comparador.compare(l1, l2) > 0)
			return -1;
		    else
			return 0;
	    });
	/* En caso contrario ordena de forma normal. */
	else 
	    lista = lineas.getLineas().mergeSort((l1, l2) -> {
		    l1= l1.replaceAll("[^\\p{L}\\p{Z}]", "");
		    l2= l2.replaceAll("[^\\p{L}\\p{Z}]", "");
		    return comparador.compare(l1, l2);
	    });

	/* Actualiza las lineas. */
	lineas.setLineas(lista);

	/* Guarda las lineas ordenadas en el archivo identificador que el 
           usuario haya especificado. */
	if(procesador.getBanderaO()) {
	    try {
		lineas.guarda(procesador.getIdentificador());
	    } catch (IOException ioe) {
		System.exit(1);
	    }
	/* Muestra en pantalla las líneas ordenadas. */
	} else 
	    for (String linea : lineas.getLineas())
		System.out.println(linea);
	    
    }
}
